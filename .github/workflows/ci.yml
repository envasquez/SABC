name: CI Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting checks
      run: |
        ruff check . --output-format=github

    - name: Run formatting checks
      run: |
        ruff format --check .

    - name: Run type checking
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  test:
    runs-on: ubuntu-latest
    needs: [lint-and-format]

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: dev123
          POSTGRES_DB: sabc_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:dev123@localhost:5432/sabc_test
      run: |
        pytest tests/ -v --cov=core --cov=routes --cov-report=term --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run deployment checks
      run: |
        echo "üöÄ Running Deployment Checks"
        echo "============================"

        # Run quality checks (equivalent to deploy-app)
        echo "Running linting..."
        ruff check .

        echo "Running type checking..."
        mypy . --ignore-missing-imports || true

        echo "‚úÖ All deployment checks passed!"

    - name: Build deployment package
      run: |
        mkdir -p dist
        tar -czf dist/sabc-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='htmlcov' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          --exclude='.pytest_cache' \
          --exclude='node_modules' \
          .

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-${{ github.sha }}
        path: dist/sabc-${{ github.sha }}.tar.gz

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Install dependencies for scanning
      run: |
        pip install -r requirements.txt
      continue-on-error: true
    
    - name: Run safety check (known vulnerabilities)
      run: |
        safety check --json --output safety-report.json || echo "Safety check completed with warnings"
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json -x tests/ || echo "Bandit scan completed with findings"
      continue-on-error: true
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  notify:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build]
    if: always()

    steps:
    - name: CI Summary
      run: |
        echo "üéØ CI Pipeline Summary"
        echo "- Lint & Format: ${{ needs.lint-and-format.result }}"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"

        if [[ "${{ needs.lint-and-format.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "‚úÖ Pipeline completed successfully!"
        else
          echo "‚ùå Pipeline had failures - check individual jobs"
        fi