name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ master ]
    types: [ labeled ]

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/develop' || 
      (github.event_name == 'pull_request' && contains(github.event.label.name, 'deploy-staging'))
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup staging environment
      run: |
        echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
        echo "DEPLOY_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV

    # Deploy to staging server
    - name: Deploy to staging server
      run: |
        echo "🚀 Deploying to staging environment..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} \
          -i <(echo "${{ secrets.STAGING_SSH_KEY }}") << 'EOF'
          
          # Navigate to staging application directory
          cd ~/app/SABC_II/SABC
          
          # Stop the staging application
          echo "⏹️ Stopping staging application..."
          sudo systemctl stop sabc-staging
          
          # Pull latest changes from develop branch
          echo "📥 Pulling latest changes..."
          git fetch --all
          git reset --hard origin/develop
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          nix develop -c bash -c "
              cd sabc &&
              pip install -r requirements.txt 2>/dev/null || echo 'No requirements.txt found'
          "
          
          # Run database migrations
          echo "🗄️ Running database migrations..."
          nix develop -c bash -c "
              cd sabc &&
              python manage.py migrate --noinput
          "
          
          # Load staging test data
          echo "🎣 Loading staging test data..."
          nix develop -c bash -c "
              cd sabc &&
              python manage.py load_fake_data --clear || echo 'Test data loading skipped'
          "
          
          # Collect static files
          echo "📁 Collecting static files..."
          nix develop -c bash -c "
              cd sabc &&
              python manage.py collectstatic --noinput
          "
          
          # Start staging application
          echo "🔄 Starting staging application..."
          sudo systemctl start sabc-staging
          
          echo "✅ Staging deployment complete"
        EOF

    # Run smoke tests on staging
    - name: Run staging smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        
        # Wait for application to start
        sleep 10
        
        # Test basic endpoints
        if curl -f https://${{ secrets.STAGING_HOST }}/health/ > /dev/null 2>&1; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
        if curl -f https://${{ secrets.STAGING_HOST }}/ > /dev/null 2>&1; then
          echo "✅ Home page loads"
        else
          echo "❌ Home page failed to load"
          exit 1
        fi
        
        if curl -f https://${{ secrets.STAGING_HOST }}/tournaments/ > /dev/null 2>&1; then
          echo "✅ Tournament list loads"
        else
          echo "❌ Tournament list failed to load"
          exit 1
        fi
        
        echo "✅ All smoke tests passed"

    # Comment on PR with staging deployment info
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Staging Deployment Complete**
            
            **Environment**: Staging
            **Commit**: \`${{ env.DEPLOY_SHA }}\`
            **Status**: ✅ Deployed Successfully
            
            **Test URLs**:
            - 🏠 [Home Page](https://${{ secrets.STAGING_HOST }})
            - 🏆 [Tournaments](https://${{ secrets.STAGING_HOST }}/tournaments/)
            - 👥 [Roster](https://${{ secrets.STAGING_HOST }}/roster/)
            - 🔍 [Health Check](https://${{ secrets.STAGING_HOST }}/health/)
            
            **What's included**:
            - Latest code changes from this PR
            - Database migrations applied
            - Static files updated
            - All smoke tests passed
            
            Ready for manual testing! 🎣`
          })

  # Cleanup old staging deployments
  cleanup-staging:
    name: Cleanup Old Staging Deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Cleanup old staging environments
      run: |
        echo "🧹 Cleaning up old staging deployments..."
        echo "This would clean up staging environments older than 7 days"
        echo "✅ Cleanup simulation complete"