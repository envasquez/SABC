name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  # Matrix testing across multiple environments
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        test-type: ['unit', 'integration', 'performance']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sabc_test
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Setup Nix Cache
      uses: cachix/cachix-action@v15
      with:
        name: nix-community

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/nix
          ~/.cache/pip
        key: ${{ runner.os }}-nix-${{ hashFiles('flake.lock') }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-nix-

    # Code quality checks
    - name: Check code formatting
      run: nix develop -c ruff format --check .

    - name: Lint code with ruff
      run: nix develop -c ruff check . --output-format=github

    - name: Type checking with pyright
      run: nix develop -c bash -c "PYRIGHT_PYTHON_FORCE_VERSION='latest' pyright --outputformat text"

    - name: Security check with bandit
      run: nix develop -c bash -c "pip install bandit && bandit -r sabc/ -f json -o bandit-report.json"
      continue-on-error: true

    # Test execution based on matrix
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      env:
        SKIP_PIP_INSTALL: 1
        UNITTEST: 1
        POSTGRES_DB: sabc_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: |
        nix develop -c bash -c "
          cd sabc &&
          python manage.py migrate --run-syncdb &&
          coverage run --branch --source=. -m pytest tournaments/tests/ users/tests/tests.py polls/tests/ --tb=short -v &&
          coverage xml &&
          coverage report --show-missing
        "

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      env:
        SKIP_PIP_INSTALL: 1
        UNITTEST: 1
        POSTGRES_DB: sabc_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: |
        nix develop -c bash -c "
          cd sabc &&
          python manage.py migrate --run-syncdb &&
          python manage.py load_fake_data --clear &&
          coverage run --branch --source=. -m pytest tests/comprehensive_business_logic_tests.py tests/test_migrations.py --tb=short -v &&
          coverage xml
        "

    - name: Run performance tests
      if: matrix.test-type == 'performance'
      env:
        SKIP_PIP_INSTALL: 1
        UNITTEST: 1
        POSTGRES_DB: sabc_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: |
        nix develop -c bash -c "
          cd sabc &&
          python manage.py migrate --run-syncdb &&
          python manage.py load_fake_data --clear &&
          python tests/test_performance.py > performance-report.txt &&
          cat performance-report.txt
        "

    # Upload test results and coverage
    - name: Upload coverage to Codecov
      if: matrix.test-type != 'performance'
      uses: codecov/codecov-action@v4
      with:
        file: ./sabc/coverage.xml
        flags: ${{ matrix.test-type }}
        name: codecov-${{ matrix.python-version }}-${{ matrix.test-type }}
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          sabc/coverage.xml
          sabc/coverage.json
          bandit-report.json
          performance-report.txt
        retention-days: 30

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and validate Docker image (if you use Docker)
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Build application
      run: |
        nix develop -c bash -c "
          cd sabc &&
          python manage.py collectstatic --noinput --settings=sabc.settings &&
          python manage.py check --deploy --settings=sabc.settings
        "
      env:
        DJANGO_SETTINGS_MODULE: sabc.settings
        SECRET_KEY: dummy-key-for-build
        ALLOWED_HOSTS: "*"
        DEBUG: False

    # Optional: Build Docker image if you use containerization
    # - name: Build Docker image
    #   run: docker build -t sabc:${{ github.sha }} .

  # Notify on success/failure
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All checks passed! Ready for deployment."
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Build: ${{ needs.build.result }}"

    - name: Notify failure
      if: failure()
      run: |
        echo "❌ CI/CD pipeline failed. Check the logs above."
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Build: ${{ needs.build.result }}"